;;;; File di mapping delle funzioni GTK con funzioni lisp
(in-package :gtk-server)

(defgtk gtk_window_new widget ((type integer)))
(defgtk gtk_window_set_title none ((window widget)(title string)))
(defgtk gtk_window_set_transient_for none ((window widget) (child widget)))
(defgtk gtk_vbox_new widget ((homogeneus boolean) (spacing integer)))
(defgtk gtk_hbox_new widget ((homogeneus boolean) (spacing integer)))
(defgtk gtk_container_add none ((container widget) (child widget)))
(defgtk gtk_button_new_with_label widget ((label string)))
(defgtk gtk_combo_box_new_text widget ())
(defgtk gtk_box_pack_start none ((box widget) (child widget) (expand boolean)
				 (fill boolean) (padding integer)))
(defgtk gtk_box_pack_end none ((box widget) (child widget) (expand boolean)
			       (fill boolean) (padding integer)))
(defgtk gtk_text_view_new widget ())
(defgtk gtk_label_new widget ((text string)))
(defgtk gtk_entry_new widget ())
(defgtk gtk_widget_show_all none ((what widget)))
(defgtk gtk_widget_destroy none ((what widget)))
(defgtk gtk_entry_get_text string ((w widget)))
(defgtk gtk_entry_set_text none ((what widget) (text string)))
(defgtk gtk_combo_box_append_text none ((w widget) (what string)))
(defgtk gtk_combo_box_get_active_text string ((w widget)))
(defgtk gtk_combo_box_set_active none ((w widget) (index integer)))
(defgtk gtk_combo_box_remove_text none ((w widget) (what integer)))
(defgtk gtk_combo_box_get_active integer ((w widget)))
(defgtk gtk_text_buffer_get_start_iter none ((what widget) (iter widget)))
(defgtk gtk_text_buffer_get_end_iter none ((what widget) (iter widget)))
(defgtk gtk_text_view_get_buffer widget ((what widget)))
(defgtk gtk_text_view_set_editable none ((what widget) (status boolean)))
(defgtk gtk_text_buffer_get_text string ((what widget) (iter-start widget) (iter-end widget) (hidden-char boolean)))
(defgtk gtk_text_buffer_insert none ((what widget) (iter widget) (cosa string) (length integer)))
(defgtk gtk_text_buffer_get_insert widget ((buffer widget)))
(defgtk gtk_text_buffer_insert_at_cursor none ((buffer widget) (text string) (len integer)))
(defgtk gtk_text_view_scroll_to_mark none ((text_view widget)
                                           (mark widget)
                                           (within_margin float)
                                           (use_align boolean)
                                           (xalign float)
                                           (yalign float)))
(defgtk gtk_frame_new widget ())
(defgtk gtk_server_enable_c_string_escaping none ())
(defgtk gtk_text_buffer_set_text none ((what widget) (text string) (length integer)))
(defgtk gtk_scrolled_window_new widget ())
(defgtk gtk_table_new widget ((rows integer) (cols integer) (homogeneus boolean)))
(defgtk gtk_table_attach_defaults none
	      ((container widget) (child widget) (left integer) (right integer) 
	       (top integer) (bottom integer)))
(defgtk gtk_misc_set_alignment none ((what widget) (xalign float) (yalign float)))
(defgtk gtk_label_set_use_markup none ((what widget) (status boolean)))
(defgtk gtk_frame_set_label none ((what widget) (label string)))
(defgtk gtk_message_dialog_new widget ((parent widget)
				      (flags integer)
				      (type integer)
				      (buttons integer)
				      (message string)))
(defgtk gtk_dialog_run integer ((what widget)))
(defgtk gtk_window_set_default_size none ((win widget) (width integer) (height integer)))
(defgtk gtk_menu_bar_new widget ())
(defgtk gtk_menu_shell_append none ((where widget) (child widget)))
(defgtk gtk_menu_item_new widget ())
(defgtk gtk_menu_item_new_with_label widget ((label string)))
(defgtk gtk_menu_item_new_with_mnemonic widget ((label string)))
(defgtk gtk_menu_new widget ())
(defgtk gtk_menu_item_set_right_justified none ((what widget) (status boolean)))
(defgtk gtk_menu_item_set_submenu none ((what widget) (submenu widget)))
(defgtk gtk_check_menu_item_new_with_label widget ((label string)))
(defgtk gtk_check_menu_item_get_active integer ((what widget)))
(defgtk gtk_button_new widget ())
(defgtk gtk_image_new widget ())
(defgtk gtk_image_new_from_pixmap widget ((pixmap widget) (bitmap widget)))
(defgtk gtk_image_set_from_file none ((image widget) (filename string)))
(defgtk gtk_image_new_from_file widget ((filename string)))
(defgtk gtk_file_chooser_dialog_new widget ((title string)
					    (parent widget)
					    (action integer)
					    (first-button-label string)
					    (first-button-response integer)
					    (second-button-label string)
					    (second-button-response integer)))
(defgtk gtk_file_chooser_widget_new widget ((action integer)))
(defgtk gtk_file_chooser_get_filename string ((dialog widget)))
(defgtk gtk_file_chooser_set_filename boolean ((dialog widget) (filename string)))
(defgtk gtk_file_filter_new widget ())
(defgtk gtk_file_filter_add_pattern none ((filter widget) (string pattern)))
(defgtk gtk_file_filter_set_name none ((filter widget) (name string)))
(defgtk gtk_file_chooser_add_filter none ((chooser widget) (filter widget)))
(defgtk gtk_cell_renderer_text_new widget ())
(defgtk gtk_list_store_append none ((store widget) (iter widget)))
(defgtk gtk_list_store_iter_is_valid integer ((store widget) (iter widget)))
(defgtk gtk_list_store_clear none ((store widget)))
(defgtk gtk_list_store_set none ((store widget) (iter widget) (column integer)
				 (value string) (terminator integer)))
(defgtk gtk_tree_model_get_string_from_iter string ((model widget) (iter widget)))
(defgtk gtk_tree_selection_set_mode none ((tv widget) (mode integer)))
(defgtk gtk_tree_view_get_selection widget ((tv widget)))
(defgtk gtk_tree_view_new widget ())
(defgtk gtk_tree_view_insert_column_with_attributes integer
  ((tv widget) (pos integer) (title string) (renderer widget) 
   (attribute string) (value integer)))
(defgtk gtk_tree_view_get_model widget ((tv widget)))
(defgtk gtk_tree_view_set_model none ((tv widget) (model widget)))
(defgtk gtk_tree_selection_get_selected integer ((sel widget) (model widget) (row widget)))

(defgtk g_object_unref none ((obj widget)))
(defgtk g_object_ref_sink none ((obj widget)))

(defgtk gtk_tree_view_get_column widget ((tv widget) (column integer)))
(defgtk gtk_tree_view_column_get_width integer ((column widget)))
(defgtk gtk_tree_view_column_get_fixed_width integer ((column widget)))
(defgtk gtk_tree_view_column_set_fixed_width none ((column widget) (width integer)))
(defgtk gtk_tree_view_column_set_min_width none ((column widget) (width integer)))
(defgtk gtk_tree_view_column_get_min_width integer ((column widget)))
(defgtk gtk_tree_view_column_set_max_width none ((column widget) (width integer)))
(defgtk gtk_tree_view_column_get_max_width integer ((column widget)))
(defgtk gtk_tree_view_column_set_sizing none ((column widget) (sizing integer)))
(defgtk gtk_tree_view_column_get_sizing integer ((column widget)))

(defgtk gtk_window_set_modal none ((win widget) (modal integer)))
(defgtk gtk_widget_set_size_request none ((widget widget) (width integer) (height integer)))
(defgtk gtk_widget_set_usize none ((widget widget) (width integer) (height integer)))
(defgtk gtk_widget_set_name none ((widget widget) (name string)))
(defgtk gtk_rc_parse_string none ((rc-string string)))
(defgtk gtk_hpaned_new widget ())
(defgtk gtk_vpaned_new widget ())
(defgtk gtk_paned_add1 none ((widget widget) (child widget)))
(defgtk gtk_paned_add2 none ((widget widget) (child widget)))
(defgtk gtk_paned_pack1 none ((widget widget) (child widget) (resize boolean) (shrink boolean)))
(defgtk gtk_paned_pack2 none ((widget widget) (child widget) (resize boolean) (shrink boolean)))

(defun gtk_list_store_new (&rest types)
  "Please see the Gtk-Documentation. 
WARNING: this function isn't generated by the defgtk macro because need
to call the gtk_server_redefine function of the gtk-server.
The number of argument is variable here.
This function only works in Gtk-Server 2.0.7"
  (let ((preparazione (format nil "gtk_server_redefine gtk_list_store_new NONE WIDGET ~a LONG ~{~a ~}"
			      (1+ (length types))
			      (make-list (length types) :initial-element "LONG")))
	(comando (format nil "gtk_list_store_new ~a ~{~a ~}"
			 (length types) types)))
    (send-gtk preparazione)
    (send-gtk comando)))
	
